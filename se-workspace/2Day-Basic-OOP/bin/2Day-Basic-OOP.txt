**2일차(2020-07.09) 주요목차**
	-	객체지향개념
	-	객체 Object
	-	클래스 Class
	-	변수 Variable
	-	메서드 Method
	-	접근제어자 Access Modifier - public, private
	-	Encapsulation
************************************************
	-	1일차 Review
		자바 개발 환경 설정: jdk 다운 후 설치, jdk/bin을 시스템 환경변수에 등록
		IDE(Integrated Development Environment) 통합개발환경을 제공하는 Eclipse 다운 후 실행
		JDK → JRE → JVM
		JVM(Java Virtual Machine): 자바 가상머신 → 클래스 파일(자바실행프로그램)을 OS에 통역, 즉 자바 프로그램을 실행
																					(Main Method에서 시작한다.)
														  메모리 관리(즉 C와 같이 개발자가 직접 메모리를 관리하지 않는다.)
														  →Garbage Collection 가비지 컬렉션을 JVM이 한다.
************************************************
1. 객체지향개념(Object Oriented Concept)

	소프트웨어 개발 방법론에 속함 →절차 지향, 객체 지향
	
	소프트웨어 개발 모델 → 폭포수 모델(Waterfall Model), 최근에는 애자일(Agile)이 있다.
	
	소프트웨어 개발 생명 주기(Life Cycle):
		요구사항분석(Requirements) → 설계(Design) → 구현(Implementation) →
		테스트(Verification) → 운영(유지보수)(Maintenance)
		
		객체지향개념은 분석, 설계, 구현, 테스트, 운영 전반에 대해 어떤 방식으로 소프트웨어를 만들 것인지에 대한 철학이다.
		
		객체지향이란? 객체를 기본 단위로 객체와 객체의 관계를 중심으로 분석, 설계, 구현하는 기법
		
2. 객체 Object
	시스템의 기본 단위, 시스템을 구성하는 주요 사물이나 개념.
	객체(Object)는 속성(Attribute)과 기능(Operation)으로 구성된다.

3. 클래스 Class
	객체 생성을 위한 틀 or 설계도.
	→ 붕어빵틀(Class)로부터 붕어빵(Object or Instance)을 만든다.
		 건물 설계도(Class)로부터 건물(Object or Instance)을 만든다.
		 
		 **클래스와 객체의 관계: 클래스는 객체 생성을 위한 틀이다.
		 
4. 인스턴스 변수 Instance Variable
	속성 Attribute라고도 불린다.
	객체의 속성 정보를 저장하는 공간이다.
	
5. 메서드 Method
	기능 Operation이라고도 불린다.
	객체의 기능을 정의한다.
	
		자바 프로그램을 개발하는 순서는 
		1. 클래스를 정의 → 2. 해당 클래스를 이용해 객체 생성 → 3. 메인 메서드가 있는 클래스를 실행한다.
		
	객체 생성 코드
	Person p=new Person();
	위 코드를 분석해보면,
		Person: 클래스명
		p: 객체 주소값을 저장하는 변수
		=: 할당 Assign
		Person(): 생성자 Constructor
		
	메서드 문법
	[접근제어자] void 또는 return type 메서드명(매개변수){
		메서드 실행부
		[return]
	}
	메서드 리턴값이 없으면 void를 명시하고 리턴값이 있으면 리턴값의 데이터타입을 명시한다.
	ex) public void m1(){
	
		}
	ex) public String m2(){
			return"리턴값"ㅣ
			}

6. 접근제어자 Access Modifier - public, private
	자바에서는 클래스(객체) 단위의 정보은닉(Information Hiding)을 위해 접근 제어자를 통해 접근에 대한 설정을 한다.
	
	접근 범위가 넓은 순부터 좁은 순으로 나열
	public → protected →default →private
	public: 어느 곳에서도 접근이 가능하도록 설정
	protected: 같은 팩키지 내에서 접근 가능, 단 상속시에는 다른 팩키지에서도 접근가능
	default(따로 명시하지 않을 경우 디폴트): 같은 팩키지내에서만 접근가능
	private: 자신의 클래스에서만 접근 가능
	
	Protected 접근제어자는 상속을 공부하고 이후에 확인해볼 예쩡
	
	
**3일(2020.07.09) 주요목차**
1. Review
2. Encapsulation
3. Setter/ Getter
4. UML: Class Diagram
5. Java DataType
	-기본형(Primitive data type)
	-참조형(Reference data type)
6. 연산자, 제어문(조건문, 반복문)

	
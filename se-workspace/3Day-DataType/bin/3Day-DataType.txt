**3일차(2020.07.09) 주요목차**
1. Review
2. Encapsulation
3. Setter / Getter
4. Constructor
5. UML: Class Diagram
6. Java Data Type
	-기본형(Primitive date type)
	-참조형(Reference data type)
7. 연산자, 제어문(조건문, 반복문)
********************************************************

	클래스 구성요소
	package step1; // 팩키지 - 클래스를 의미있는 디렉토리로 분류
	
	import step2.Car; // 임포트 - 다른 팩키지의 자원을 이용할때 사용
	
	//클래스 정의 - 객체 생성을 위한 틀
	public class Person{
		//속성 or 인스턴스 변수 - 객체의 속성정보를 저장
		private String name;
		
		//기능 or 메서드
		public void eat(){
			//기능 구현부
		}
	}
*********************************************************
	//위 Person class를 이용해 객체 생성 테스트를 하기 위해
	//메인 메서드가 있는 클래스를 정의
	package step3;
	
	//import는 필요한 경우에만 명시하면 된다
	import step1.Person;
	
	public class TestPerson{
		//메인메서드: 프로그램 실행시 시작점(JVM이 실행한다)
		public static void main(String args[]){
			//객체 생성
				Person p=new Person{};
			//객체의 eat 메서드 호출
				p.eat();
		}
	}
**********************************************************
1. Encapsulation

	"public interface, private implementation" - 인터페이스는 공개하고, 구현부는 감춘다
	참고) 인터페이스는 외부와 소통하는 역할을 의미
			 구현부는 해당 단위의 주요 알고리즘을 의미
	Why? 1. 정보은닉(Information Hiding)을 통한 보안성 향상
			   2. 사용자 편의성 향상 → 사용하는 측에서는 서비스를 제공하는 측의
			   										구현부(Implementation)를 몰라도 인터페이스만 알면 사용할 수 있다.
			   3. 유지보수성 향상  →  서비스를 제공하는 측의 구현부가 변경되어도 사용사는 서비스를 이용하는 데 문제 없다.
***********************************************************
2. Setter / Getter

	setter: 객체의 속성(인스턴스변수)정보를 할당받는 메서드
				ex)
					public void setName(String name){
						this.name=name;
					}
					!!this는 자바예약어(Keyword)로서 현재 객체를 가르키는 역할
						this를 이용해 매개변수 name과 인스턴스변수 name을 구분한다.
	
	getter: 객체의 속성정보를 반환하는 메서드
				ex)
					public String getName(){
						return name;
					}
***********************************************************
3. Constructor(생성자)
	:객체 생성 지점에 실행되는 영역
	
	객체 생성 Person p=new Person();
	Person: 클래스명 or 참조형 데이터타입
	p: 참조변수
	=: 할당 or 대입
	new: 객체 생성시 사용하는 자바 예약어(keyword)
	Person(): Constructor(생성자)
	
	Constructor(생성자)특징
		클래스에서 생성자를 명시하지 않으면 디폴트 생성자를 컴파일시에 자동으로 삽입된다.
		개발자가 클래스에 생성자를 직접 명시할 경우에는 디폴트 생성자는 삽입되지 않는다.
		생성자는 반드시 클래스명과 동일해야 한다.
		메서드와는 다르게 리턴타입 명시하지 않는다.
		
	생성자(Constructor)를 명시하는 이유?
		객체 생성시 실행되는 생성자에 필요시 데이터를 전달하여 객체의 속성정보에 할당하고
		객체 생성시 초기화 조건에 따라 특정 작업을 수행하도록 하기 위해서이다.
************************************************************
4. UML: Class Diagram
	
	UML(Unified Modeling Language):  
			통합모델링 언어
			객체지향분석설계(OOAD:Object Oriented Analysis and Design)시 사용하는 표준화된 기술
			Class Diagram을 staruml tool을 이용해 작성해본다.
									
************************************************************
5. Java DataType
		-기본형(Primitive data type): java에서 기본적으로 제공하는 데이터타입
		
						1byte			2byte			4byte			8byte
		정수형		byte				short			int				long
		실수형												float				double
		문자형							char
		논리형		boolean
		
		- 참조형(Reference data type): 자바 클래스는 참조형 데이터 타입이 된다.
				객체를 참조하는 주소값을 저장하는 변수를 참조변수라고 하고,
				참조변수(reference variable)의 데이터 타입을 참조형 데이터타입이라고 한다.
				JVM은 메모리를 관리할 때, 객체는 Heap 메모미 영역에 저장.
				해당 객체의 메모리 주소값은 Stack영역에 저장한다.
				생성된 객체에 대한 접근은 Stack영역에 저장된 주소값을 이용한다.
************************************************************
**4일차 목차**
1.연산자
2.제어문(조건문,반복문)
3.객체 초기화 단계
4.Variable Scope(변수 범위)
5.Relationship: has a relationship(aggregation)

		
		
		
		
		
		